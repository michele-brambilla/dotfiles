(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(inhibit-startup-screen t))

;; Max 80 cols per line, indent by two spaces, no tabs.
'(c++-indent-level 2)
'(c-basic-offset 2)
'(custom-safe-themes
  (quote
   ("8db4b03b9ae654d4a57804286eb3e332725c84d7cdab38463cb6b97d5762ad26" default)))
'(fill-column 80)
'(indent-tabs-mode nil)

;; hide toolbar
(if (display-graphic-p())
    (tool-bar-mode -1) )

(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )


;; bg color
;;(add-to-list 'default-frame-alist '(background-color . "#fdf6e3"))
(add-to-list 'default-frame-alist
             '(font . "DejaVu Sans Mono-12"))
;;             '(font . "Monaco-12:width=condensed:height=110"))
;;             '(font . "LucidaConsole-12:width=condensed:height=110"))
;;(set-face-attribute 'default nil :height 100 :width 'condensed)


(require 'package)
(add-to-list 'package-archives
             '("melpa" . "http://melpa.milkbox.net/packages/") t)
(add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/"))
(package-initialize)
(setq url-http-attempt-keepalives nil)


;; line numbers on left
(global-linum-mode t)
(eval-after-load 'linum
  '(progn
     (defface linum-leading-zero
       `((t :inherit 'linum
            :foreground ,(face-attribute 'linum :background nil t)))
       "Face for displaying leading zeroes for line numbers in
display margin."
       :group 'linum)
     
     (defun linum-format-func (line)
       (let ((w (length
                 (number-to-string (count-lines (point-min) (point-max))))))
         (concat
          (propertize (make-string (- w (length (number-to-string line))) ?0)
                      'face 'linum-leading-zero)
          (propertize (number-to-string line) 'face 'linum))))
     
     (setq linum-format 'linum-format-func)))


;; Highlight selection
(transient-mark-mode t)

;; C-c i = uncomment-region
(global-set-key (kbd "C-c i") 'uncomment-region)

;; Answer with y/n instead of yes/no
(fset 'yes-or-no-p 'y-or-n-p)

;; Show date and time
(setq display-time-day-and-date t
                display-time-24hr-format t)
             (display-time)

;; Hide compilation messagges if successiful
(defun notify-compilation-result(buffer msg)
  "Notify that the compilation is finished,
close the *compilation* buffer if the compilation is successful,
and set the focus back to Emacs frame"
  (if (string-match "^finished" msg)
      (progn
	(delete-windows-on buffer)
	(tooltip-show "\n Compilation Successful :-) \n "))
    (tooltip-show "\n Compilation Failed :-( \n "))
  (setq current-frame (car (car (cdr (current-frame-configuration)))))
  (select-frame-set-input-focus current-frame)
  )
(add-to-list 'compilation-finish-functions
	     'notify-compilation-result)
(setq compile-command "make -j")


(add-hook 'c-mode-common-hook
	  (lambda()
	    (local-set-key (kbd "C-c <right>") 'hs-show-block)
	    (local-set-key (kbd "C-c <left>")  'hs-hide-block)
	    (local-set-key (kbd "C-c <up>")    'hs-hide-all)
	    (local-set-key (kbd "C-c <down>")  'hs-show-all)
	    (hs-minor-mode t)
	    )
	  )

(add-hook 'c++-mode-common-hook
	  (lambda()
	    (local-set-key (kbd "C-c <right>") 'hs-show-block)
	    (local-set-key (kbd "C-c <left>")  'hs-hide-block)
	    (local-set-key (kbd "C-c <up>")    'hs-hide-all)
	    (local-set-key (kbd "C-c <down>")  'hs-show-all)
	    (hs-minor-mode t)
	    )
	  )

(require 'auto-complete-c-headers)
(add-to-list 'ac-sources 'ac-source-c-headers)

(setq load-path (cons (expand-file-name "/dir/with/cmake-mode") load-path))
 (require 'cmake-mode)

(autoload 'flyspell-mode "flyspell" "On-the-fly spelling checker." t)
(add-hook 'LaTeX-mode-hook 'flyspell-mode)
(dolist (hook '(text-mode-hook))
  (add-hook hook (lambda () (flyspell-mode 1))))
(dolist (hook '(change-log-mode-hook log-edit-mode-hook))
  (add-hook hook (lambda () (flyspell-mode -1))))
(add-hook 'c++-mode-hook
          (lambda ()
            (flyspell-prog-mode)
            ))

(load-library "hideshow")
(add-hook 'c-mode-common-hook   'hs-minor-mode)
(add-hook 'c++-mode-common-hook 'hs-minor-mode)
(add-hook 'emacs-lisp-mode-hook 'hs-minor-mode)
(add-hook 'java-mode-hook       'hs-minor-mode)
(add-hook 'lisp-mode-hook       'hs-minor-mode)
(add-hook 'perl-mode-hook       'hs-minor-mode)
(add-hook 'sh-mode-hook         'hs-minor-mode)
(add-hook 'latex-mode-hook      'hs-minor-mode)


;; clang format
(require 'clang-format)
(global-set-key [C-M-tab] 'clang-format-region)
(setq load-home-init-file t) ; don't load init file from ~/.xemacs/init.el
